// Generated by CoffeeScript 1.6.3
(function() {
  var umd;

  umd = function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define([], factory);
    } else if (typeof exports === 'object' && typeof module === 'object') {
      return module.exports = factory();
    } else {
      return root.timeunit = factory(root.b);
    }
  };

  umd(this, function() {
    var C, C0, C1, C2, C3, C4, C5, C6, baseTimeUnit, exports, object;
    exports = {};
    object = function(proto, newObj) {
      var F, answer, name, prop;
      if (Object.create != null) {
        answer = Object.create(proto);
      } else {
        F = function() {};
        F.prototype = proto;
        answer = new F();
      }
      for (name in newObj) {
        prop = newObj[name];
        answer[name] = prop;
      }
      return answer;
    };
    C0 = 1;
    C1 = C0 * 1000;
    C2 = C1 * 1000;
    C3 = C2 * 1000;
    C4 = C3 * 60;
    C5 = C4 * 60;
    C6 = C5 * 24;
    C = [C0, C1, C2, C3, C4, C5, C6];
    baseTimeUnit = {
      toNanos: function(d) {
        return d / (C[0] / C[this.index]);
      },
      toMicros: function(d) {
        return d / (C[1] / C[this.index]);
      },
      toMillis: function(d) {
        return d / (C[2] / C[this.index]);
      },
      toSeconds: function(d) {
        return d / (C[3] / C[this.index]);
      },
      toMinutes: function(d) {
        return d / (C[4] / C[this.index]);
      },
      toHours: function(d) {
        return d / (C[5] / C[this.index]);
      },
      toDays: function(d) {
        return d / (C[6] / C[this.index]);
      },
      convert: function(sourceDuration, sourceUnit) {
        return sourceDuration / (C[this.index] / C[sourceUnit.index]);
      },
      sleep: function(timeout, fn) {
        var ms;
        if (timeout < 0) {
          timeout = 0;
        }
        ms = this.toMillis(timeout);
        return setTimeout(fn, ms);
      },
      interval: function(interval, fn) {
        var ms;
        if (interval < 0) {
          throw new Error("Invalid interval: " + interval + " " + this.name);
        }
        ms = this.toMillis(interval);
        return setInterval(fn, ms);
      }
    };
    exports.nanoseconds = object(baseTimeUnit, {
      index: 0,
      name: "nanoseconds"
    });
    exports.microseconds = object(baseTimeUnit, {
      index: 1,
      name: "microseconds"
    });
    exports.milliseconds = object(baseTimeUnit, {
      index: 2,
      name: "milliseconds"
    });
    exports.seconds = object(baseTimeUnit, {
      index: 3,
      name: "seconds"
    });
    exports.minutes = object(baseTimeUnit, {
      index: 4,
      name: "minutes"
    });
    exports.hours = object(baseTimeUnit, {
      index: 5,
      name: "hours"
    });
    exports.days = object(baseTimeUnit, {
      index: 6,
      name: "days"
    });
    exports.clearTimeout = clearTimeout;
    exports.clearInterval = clearInterval;
    return exports;
  });

}).call(this);
